# Recipe for build and integration testing on Travis-CI

# Try beta version of new travis-yml checker
version: "= 0"
# For extra debugging of failed jobs, see
# https://docs.travis-ci.com/user/common-build-problems/#Troubleshooting-Locally-in-a-Docker-Image

os: linux
language: cpp
sudo: false

# Different compiler or env are supposed to trigger different caches, but I had a hard time diagnosing problems
# in gromacs-gmxapi until I specified a separate ccache for each matrix build element.
# Note the heuristics for whether cache is shared or distinct:
# https://docs.travis-ci.com/user/caching/#Caches-and-build-matrices
cache:
  pip: true
  apt: true
  directories:
    # Note: if a cache store forks due to a stage with parallel jobs that Travis identifies as part of the same flow,
    # we must make sure that the parallel jobs do not write to any of the same caches. Also note that all stages use the
    # same cache, so early stage jobs may see caches from later stages from previous builds in the same branch.
    - $HOME/.ccache_gromacs
    - $HOME/.ccache_py
# Allows us to build and install GROMACS in one CI stage, then use the installation in a subsequent stage
#    - $HOME/install

compiler: gcc

env:
#  - GMXAPI=0.0.6 SAMPLE_RESTRAINT=0.0.6
# Python 2.7 and 3.6 are the only generations provided by pyenv on Travis-CI out-of-the-box
  - CI_MPI=0 PY=2.7
  - CI_MPI=0 PY=3.4
#  - GMXAPI=0.0.6 SAMPLE_RESTRAINT=devel CI_MPI=0 PY=3.5
  - CI_MPI=0 PY=3.6

addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    packages:
    - cmake
    - cmake-data
    - doxygen
    - libblas-dev
    - libcr-dev
    - libfftw3-dev
    - liblapack-dev
    - libmpich-dev
    - libxml2-dev
    - mpich

# Set up for all jobs
before_install:
  - PYTHON_CONFIGURE_OPTS="--enable-shared" pyenv install -f 2.7.14
  - PYTHON_CONFIGURE_OPTS="--enable-shared" pyenv install -f 3.4.7
  - PYTHON_CONFIGURE_OPTS="--enable-shared" pyenv install -f 3.6.3
  - pyenv rehash
  - pyenv versions
  # get exactly one Python version: the last listed patch version for the selected minor version
  - pyenv whence python${PY} && export PY_VER=`pyenv whence python${PY} | tail -1`
  - pyenv shell $PY_VER && pyenv shell
#  - python-config --includes
  - pyenv prefix ${PY_VER} && export PYTHON_PREFIX=`pyenv prefix ${PY_VER}`
  - pyenv which python && export PYTHON=`pyenv which python`
  - source ./ci_scripts/set_compilers

install:
  - export CCACHE_DIR=$HOME/.ccache_gromacs
  - ccache -s
  - ./ci_scripts/install_gromacs_0_0_6.sh
  - if [ "${TRAVIS_BRANCH}" != "master" ] ; then ./ci_scripts/install_gromacs_devel.sh ; fi

before_script:
  - export CCACHE_DIR=$HOME/.ccache_py
  - ccache -s
  - pip install --upgrade pip setuptools
  - pip install --upgrade packaging scikit-build
  - pip install --no-cache-dir --upgrade --no-binary ":all:" --force-reinstall networkx mpi4py MarkupSafe
  - pip install pytest numpy networkx sphinx sphinx_rtd_theme

script:
  - source $HOME/install/gromacs_0_0_6/bin/GMXRC && ./ci_scripts/pygmx.sh
  - ./ci_scripts/sample_restraint.sh v0.0.6
  - |
    if [ "${TRAVIS_BRANCH}" != master ] ; then
      source $HOME/install/gromacs_devel/bin/GMXRC && ./ci_scripts/pygmx.sh
    fi
  - |
    if [ "${TRAVIS_BRANCH}" != master ] ; then
      ./ci_scripts/sample_restraint.sh devel
    fi

# At some point, we should test more types of interactions between components, such as both static and dynamically
# linked builds, and components built with different compilers.
#
# Reference https://docs.travis-ci.com/user/customizing-the-build/#The-Build-Lifecycle
