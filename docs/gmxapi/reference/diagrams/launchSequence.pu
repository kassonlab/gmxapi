@startuml
participant "Session launcher" as launcher << client >>
participant opHandle << Operation >>
participant mdrunHandle << Operation >>
participant session << Operation >>

box "mymodule" #LightBlue
    participant "mymodule.mytool" as opFactory << OperationFactory >>
    participant moduleDirector <<mymodule impl>>
end box

box "gmx package" #LightGreen
    participant "gmx.mdrun" as mdrunFactory << OperationFactory >>
    participant graphDirector <<OperationDirector>>
    participant gmxContext <<graphContext>>
    participant graphNodeBuilder <<OperationBuilder>>
end box

box "gromacs submodule"
    participant "gmx._gromacs.mdrun" as mdrunImpl << Operation >>
end box

box "gmx context submodule" #Yellow
end box

ref over launcher, opHandle, mdrunHandle: set up graph

loop for operation in topological sequence
end

note left: note

note left: note

activate mdrunFactory
    launcher -> mdrunFactory: input args
    mdrunFactory -> mdrunFactory: directorFactory(gmxContext, input)
    activate mdrunFactory
        mdrunFactory -> graphDirector: construct

        activate graphDirector
            graphDirector -> gmxContext: newOperator()
            gmxContext -> graphNodeBuilder: create
            activate graphNodeBuilder

            graphDirector <-- gmxContext: return graphNodeBuilder
            graphDirector -> graphNodeBuilder: registerResource(Input, ...)
            graphDirector -> graphNodeBuilder: registerResource(Output, ...)
            graphDirector -> graphNodeBuilder: addDirectorFactory(functor)
            graphDirector -> graphNodeBuilder: build()
            graphNodeBuilder -> gmxContext: setupOutputProxy
                gmxContext -> mdrunHandle: create
                graphDirector <-- graphNodeBuilder: return mdrunHandle
            destroy graphNodeBuilder
            mdrunFactory <-- graphDirector: mdrunHandle
        destroy graphDirector
    deactivate mdrunFactory

    launcher <-- mdrunFactory: mdrunHandle
deactivate mdrunFactory


activate opFactory
    launcher -> opFactory: input args
    opFactory -> moduleDirector: dispatch factory
    activate moduleDirector
        note left: module decides how to process input

        moduleDirector -> opHandle: create
        opFactory <-- moduleDirector: opHandle
    deactivate moduleDirector
    launcher <-- opFactory: opHandle
deactivate opFactory


note right launcher
    gmx.run() resolves all outputs for all operations in the current scope.
end note

launcher -> gmxContext: launch / build
launcher <-- gmxContext: session
launcher -> session: run()


@enduml
